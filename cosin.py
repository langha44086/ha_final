import streamlit as st
import pandas as pd
import pickle

# H√†m l·∫•y g·ª£i √Ω s·∫£n ph·∫©m
def get_recommendations(df, ma_san_pham, cosine_sim, nums=5):
    matching_indices = df.index[df['ma_san_pham'] == ma_san_pham].tolist()
    if not matching_indices:
        st.warning(f"Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: {ma_san_pham}")
        return pd.DataFrame()
    idx = matching_indices[0]

    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:nums + 1]
    product_indices = [i[0] for i in sim_scores]

    return df.iloc[product_indices]

# Hi·ªÉn th·ªã s·∫£n ph·∫©m g·ª£i √Ω
def display_recommended_products(recommended_products, cols=5):
    for i in range(0, len(recommended_products), cols):

        col_list = st.columns(cols)
        for j, col in enumerate(col_list):
            if i + j < len(recommended_products):
                product = recommended_products.iloc[i + j]
                with col:
                    st.write(f"### {product['ten_san_pham']}")
                    gia_ban_formatted = f"{product['gia_ban']:,.0f}".replace(",", ".")
                    gia_goc_formatted = f"{product['gia_goc']:,.0f}".replace(",", ".")
                    st.write(f"**Gi√° b√°n:** {gia_ban_formatted} VND")
                    st.write(f"**Gi√° g·ªëc:** {gia_goc_formatted} VND")
                    expander = st.expander("M√¥ t·∫£")
                    product_description = product['mo_ta']
                    truncated_description = ' '.join(product_description.split()[:100]) + "..."
                    expander.write(truncated_description)

# ƒê·ªçc d·ªØ li·ªáu s·∫£n ph·∫©m ,kh√°ch h√†ng v√† t·∫≠p ƒë√°nh gi√°
df_products = pd.read_csv('San_pham_2xuly.csv')
df_customers = pd.read_csv('Khach_hang_2xuly.csv')

df_reviews = pd.read_csv('Danh_gia_final.csv')

# ƒê·ªçc file cosine similarity
with open('products_cosine_sim.pkl', 'rb') as f:
    cosine_sim_new = pickle.load(f)

# Gi·ªõi h·∫°n danh s√°ch s·∫£n ph·∫©m v√† kh√°ch h√†ng
limited_products = df_products.head(20)
limited_customers = df_customers.head(20)

# Giao di·ªán Streamlit
st.image('hasaki1.jpg', use_container_width=True)
st.title("üíé H·ªá th·ªëng g·ª£i √Ω s·∫£n ph·∫©m Recommender System üíé")

# Ti√™u ƒë·ªÅ
st.markdown('<p style="color:red; font-size:45px;"><b>Data Science Project 2 Deployment</b></p>', unsafe_allow_html=True)
st.write("Content-Based Filtering")

menu = ["Business Objective", "Hi·ªÉn th·ªã chart", "G·ª£i √Ω s·∫£n ph·∫©m", "G·ª£i √Ω m√£ kh√°ch h√†ng", "Admin"]
choice = st.sidebar.selectbox('Menu', menu)

st.sidebar.write("""#### Th√†nh vi√™n th·ª±c hi·ªán:
                 Phan VƒÉn Minh & Cao Anh H√†o""")
st.sidebar.write("""#### Gi·∫£ng vi√™n h∆∞·ªõng d·∫´n: Ms Ph∆∞∆°ng """)
st.sidebar.write("""#### Ng√†y b√°o c√°o t·ªët nghi·ªáp: 16/12/2024""")

if choice == 'Business Objective':
    st.subheader("Business Objective")
    st.write("""
    ###### HASAKI.VN l√† h·ªá th·ªëng c·ª≠a h√†ng m·ªπ ph·∫©m ch√≠nh h√£ng v√† d·ªãch v·ª• chƒÉm s√≥c s·∫Øc ƒë·∫πp chuy√™n s√¢u v·ªõi h·ªá th·ªëng c·ª≠a h√†ng tr·∫£i d√†i to√†n qu·ªëc. H·ªç mu·ªën bi·∫øt v·ªÅ s·∫£n ph·∫©m c·ªßa m√¨nh th√¥ng qua l·ª±a ch·ªçn s·∫£n ph·∫©m, ƒë√°nh gi√° c·ªßa kh√°ch h√†ng nh·∫±m ph·ª•c v·ª• t·ªët cho vi·ªác ph√°t tri·ªÉn kinh doanh v√† ƒë√°p ·ª©ng th·ªã hi·∫øu c·ªßa kh√°ch h√†ng.
    """)  
    st.write("""###### => Y√™u c·∫ßu: D√πng thu·∫≠t to√°n Machine Learning trong Python ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ. C·ª• th·ªÉ l√† d√πng Content-based recommender system""")
    st.image("2.png")
    st.subheader("Thu·∫≠t to√°n d√πng trong Content-based")
    st.write("""Gensim""")
    st.image("1.png")
    st.write("""Cosine_similarity""")
    st.image("3.png")
    st.image("5.png")
    st.subheader("Thu·∫≠t to√°n d√πng trong Collaborative filtering")
    st.write("""Surprise""")
    st.image("6.png")
    
elif choice == 'Hi·ªÉn th·ªã chart':
    st.subheader("D·ªØ li·ªáu ƒë·∫ßu v√†o cho giao di·ªán")
    st.image("4.png")
    st.subheader("Bi·ªÉu ƒë·ªì Heatmap")
    st.write("L·∫•y m·ªôt ph·∫ßn nh·ªè trong Cosine_sim,t∆∞∆°ng ·ª©ng v·ªõi ma tr·∫≠n 18x18.G·ªìm c√°c gi√° tr·ªã li√™n quan ƒë·∫øn 18 s·∫£n ph·∫©m ƒë·∫ßu ti√™n trong danh s√°ch ƒë·ªÉ tr·ª±c quan ho√°")
    st.image('heatmap.png', use_container_width=True)

elif choice == 'G·ª£i √Ω s·∫£n ph·∫©m':
    st.header("üîç G·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª±")

    product_options = [(row['ten_san_pham'], row['ma_san_pham']) for _, row in limited_products.iterrows()]
    selected_product = st.selectbox(
        "Ch·ªçn s·∫£n ph·∫©m:",
        options=product_options,
        format_func=lambda x: x[0]
    )

    if selected_product:
        ma_san_pham = selected_product[1]
        selected_product_row = df_products[df_products['ma_san_pham'] == ma_san_pham].iloc[0]
        gia_ban_formatted = f"{selected_product_row['gia_ban']:,.0f}".replace(",", ".")
        gia_goc_formatted = f"{selected_product_row['gia_goc']:,.0f}".replace(",", ".")
        st.write("### B·∫°n ƒë√£ ch·ªçn:")
        st.write(f"**T√™n s·∫£n ph·∫©m:** {selected_product_row['ten_san_pham']}")
        st.write(f"**Gi√° b√°n:** {gia_ban_formatted} VND")
        st.write(f"**Gi√° g·ªëc:** {gia_goc_formatted} VND")

        recommendations = get_recommendations(df_products, ma_san_pham, cosine_sim_new, nums=5)
        if not recommendations.empty:
            st.write("### C√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª±:")
            display_recommended_products(recommendations, cols=3)
        else:
            st.write("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m t∆∞∆°ng t·ª±.")

elif choice == 'G·ª£i √Ω m√£ kh√°ch h√†ng':
    st.header("üë§ G·ª£i √Ω s·∫£n ph·∫©m theo m√£ kh√°ch h√†ng")

    customer_options = [(row['ho_ten'], row['userId']) for _, row in limited_customers.iterrows()]
    selected_customer = st.selectbox(
        "Ch·ªçn kh√°ch h√†ng:",
        options=customer_options,
        format_func=lambda x: x[0]
    )

    if selected_customer:
        user_id = selected_customer[1]
        customer_name = [cust[0] for cust in customer_options if cust[1] == user_id][0]
        st.write(f"Xin ch√†o, **{customer_name}**!")

        recent_product = df_products.sample(1).iloc[0]  # L·∫•y s·∫£n ph·∫©m ng·∫´u nhi√™n l√†m v√≠ d·ª•

        st.write("### S·∫£n ph·∫©m g·∫ßn nh·∫•t ƒë√£ xem:")
        recent_gia_ban = f"{recent_product['gia_ban']:,.0f}".replace(",", ".")
        recent_gia_goc = f"{recent_product['gia_goc']:,.0f}".replace(",", ".")
        st.write(f"- **T√™n s·∫£n ph·∫©m:** {recent_product['ten_san_pham']}")
        st.write(f"- **M√£ s·∫£n ph·∫©m:** {recent_product['ma_san_pham']}")
        st.write(f"- **Gi√° b√°n:** {recent_gia_ban} VND")
        st.write(f"- **Gi√° g·ªëc:** {recent_gia_goc} VND")

        recommendations = get_recommendations(df_products, recent_product['ma_san_pham'], cosine_sim_new, nums=5)
        if not recommendations.empty:
            st.write("### C√°c s·∫£n ph·∫©m g·ª£i √Ω:")
            display_recommended_products(recommendations, cols=3)
        else:
            st.write("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m g·ª£i √Ω cho kh√°ch h√†ng n√†y.")

elif choice == 'Admin':
    st.header("üîê ƒêƒÉng nh·∫≠p qu·∫£n l√Ω")

    if "logged_in" not in st.session_state:
        st.session_state["logged_in"] = False

    if not st.session_state["logged_in"]:
        username = st.text_input("T√™n ƒëƒÉng nh·∫≠p:", key="admin_username")
        password = st.text_input("M·∫≠t kh·∫©u:", type="password", key="admin_password")

        if st.button("ƒêƒÉng nh·∫≠p"):
            if username == "admin" and password == "admin":
                st.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
                st.session_state["logged_in"] = True
            else:
                st.error("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.")
    else:
        st.subheader("Th√¥ng tin s·∫£n ph·∫©m")
        st.markdown('<p style="color:green; font-size:30px;"><b>Nh√≥m s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° 5 sao nhi·ªÅu nh·∫•t</b></p>', unsafe_allow_html=True)
        top_rated_products = (df_reviews[df_reviews['so_sao'] == 5]
                              .groupby('ma_san_pham')
                              .size()
                              .reset_index(name='so_luong_5_sao')
                              .sort_values('so_luong_5_sao', ascending=False)
                              .head(5))

        if not top_rated_products.empty:
            st.write("### Top 5 s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° 5 sao nhi·ªÅu nh·∫•t:")
            for _, row in top_rated_products.iterrows():
                product_name = df_products[df_products['ma_san_pham'] == row['ma_san_pham']]['ten_san_pham'].values[0]
                st.write(f"- **{product_name}**: {row['so_luong_5_sao']} ƒë√°nh gi√° 5 sao")
        else:
            st.write("Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c ƒë√°nh gi√° 5 sao.")

        product_options = [(row['ten_san_pham'], row['ma_san_pham']) for _, row in df_products.iterrows()]
        selected_product = st.selectbox(
            "Ch·ªçn s·∫£n ph·∫©m:",
            options=product_options,
            format_func=lambda x: x[0],
            key="admin_product_selectbox"
        )

        if selected_product:
            ma_san_pham = selected_product[1]
            product_info = df_products[df_products['ma_san_pham'] == ma_san_pham].iloc[0]

            st.write(f"### {product_info['ten_san_pham']}")
            st.write(f"**Gi√° b√°n:** {product_info['gia_ban']:,} VND")
            st.write(f"**Gi√° g·ªëc:** {product_info['gia_goc']:,} VND")
            st.write(f"**Ph√¢n lo·∫°i:** {product_info['phan_loai']}")
            st.write(f"**Rating:** {product_info['rating']}")
            st.write(f"**M√¥ t·∫£:** {product_info['mo_ta']}")

            # L·ªçc th√¥ng tin ƒë√°nh gi√° li√™n quan ƒë·∫øn s·∫£n ph·∫©m
            product_reviews = df_reviews[df_reviews['ma_san_pham'] == ma_san_pham]

            if not product_reviews.empty:
                st.write("### ƒê√°nh gi√° t·ª´ kh√°ch h√†ng:")

                # T√≠nh t·ªïng s·ªë khen, ch√™ v√† t·ªïng s·ªë sao
                num_positive = product_reviews[product_reviews['sentiment'] == 0].shape[0]
                num_negative = product_reviews[product_reviews['sentiment'] == 1].shape[0]
                total_stars = product_reviews['so_sao'].sum()

                st.write(f"- **T·ªïng s·ªë khen:** {num_positive}")
                st.write(f"- **T·ªïng s·ªë ch√™:** {num_negative}")
                st.write(f"- **T·ªïng s·ªë sao:** {total_stars} ‚≠ê")

                # Th·ªëng k√™ s·ªë l∆∞·ª£ng ƒë√°nh gi√° theo s·ªë sao
                star_counts = product_reviews['so_sao'].value_counts().sort_index()
                st.write("- **S·ªë l∆∞·ª£ng ƒë√°nh gi√° theo s·ªë sao:**")
                for star, count in star_counts.items():
                    st.write(f"  - **{star} sao:** {count} ƒë√°nh gi√°")

                # Hi·ªÉn th·ªã c√°c ƒë√°nh gi√°
                for _, review in product_reviews.iterrows():
                    st.write(f"- **Ng√†y b√¨nh lu·∫≠n:** {review['ngay_binh_luan']}")
                    st.write(f"- **N·ªôi dung b√¨nh lu·∫≠n:** {review['content_new']}")
                    st.write(f"- **S·ªë sao:** {review['so_sao']} ‚≠ê")
                    st.markdown("---")
            else:
                st.write("Kh√¥ng c√≥ ƒë√°nh gi√° n√†o cho s·∫£n ph·∫©m n√†y.")

        if st.button("ƒêƒÉng xu·∫•t"):
            st.session_state["logged_in"] = False
            st.experimental_rerun()
